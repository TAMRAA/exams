#include <stdio.h>
#include <stdlib.h>

// Function prototypes
void findLoops(int **mat, int n, int k, int *path, int start, int cur, int count);
void printLoop(int *path, int k);
void loop(int **mat, int n, int k);

int main() {
    
    // Example graph adjacency matrix
    int n = 4;
    int **mat = (int **)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        mat[i] = (int *)malloc(n * sizeof(int));
    }

    // Initialize adjacency matrix (example graph)
    int adjacencyMatrix[4][4] = {
            {0, 1, 0, 1},
            {0, 0, 1, 0},
            {1, 0, 0, 1},
            {0, 0, 0, 0}
    };

    // Copy values to mat
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            mat[i][j] = adjacencyMatrix[i][j];
        }
    }

    // Find and print loops of size k
    int k = 3;
    loop(mat, n, k);

    // Free memory
    for (int i = 0; i < n; i++) {
        free(mat[i]);
    }
    free(mat);

    return 0;
}

// Function to find loops of size k
void loop(int **mat, int n, int k) {
    int *path = (int *)malloc((k + 1) * sizeof(int));
    findLoops(mat, n, k, path, 0, 0, 0);
    free(path);
}

// Recursive function to find loops
void findLoops(int **mat, int n, int k, int *path, int start, int cur, int count) {
   
    if (count == k) {
        if (mat[cur][start] == 1) {
            printLoop(path, k);
            return;
        }
        return;
    }

    for (int i = 0; i < n; i++) {
        if (mat[cur][i] == 1) {
            path[count] = i;
            findLoops(mat, n, k, path, start, i, count + 1);
        }
    }
}

// Function to print loop
void printLoop(int *path, int k) {
    for (int i = 0; i < k; i++) {
        printf("%d", path[i]);
    }
    printf("%d\n", path[0]); // Add the starting vertex to complete the loop
}
