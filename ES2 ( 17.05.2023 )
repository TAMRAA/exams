#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 30

// Define struct for details
typedef struct node {
    int id;
    int count;
    struct node *next;
} node;

// Define struct for the main list
typedef struct node_t {
    char *name;
    struct node_t *next;
    struct node *details;
} node_t;

// Function Prototypes
node_t *createNode(node_t *head, char *name, int id);
node_t *logic(node_t *head, char *name, int id);
node *createDetail(node *head, int id);
node_t *insert(char *nameFile);
void destroy(node_t *head);

// Main Function
int main(){
    node_t *head = NULL;
    node *detail = NULL;

    head = insert("../input.txt");

    node_t *ptr = head;
    while (ptr != NULL){
        fprintf(stdout,"- %s:\n", ptr->name);
        detail = ptr->details;
        while (detail != NULL){
            fprintf(stdout,"id: %d count: %d\n", detail->id, detail->count);
            detail = detail->next;
        }
        ptr = ptr->next;
    }

    destroy(head);
    
    return EXIT_SUCCESS;
}

// Function Declarations

node_t *createNode(node_t *head, char *name, int id){
    node_t *newNode = (struct node_t *) malloc (sizeof (node_t));
    if(newNode == NULL){
        fprintf(stderr,"Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    newNode->name = strdup(name);

    newNode->next = head;
    head = newNode;

    newNode->details = createDetail(head->details, id);

    return newNode;
}

node *createDetail(node *head, int id){
    node *newNode = (struct node *) malloc (sizeof (node));
    if(newNode == NULL){
        fprintf(stderr,"Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    newNode->id = id;
    newNode->next = head;
    newNode->count = 1;

    return newNode;
}

node_t *insert(char *nameFile){
    node_t *head = NULL;
    FILE *fp = fopen(nameFile,"r");
    char name[MAX];
    int id;

    if(fp == NULL){
        fprintf(stderr,"Error opening file\n");
        exit(EXIT_FAILURE);
    }

    while (fscanf(fp,"%s %d",name, &id) != EOF){
        head = logic(head,name,id);
    }

    fclose(fp);

    return head;
}

node_t *logic(node_t *head, char *name, int id){
    node_t *ptr = head;
    while (ptr != NULL){
        if(!strcmp(ptr->name,name)){
            node *detail = ptr->details;
            while (detail != NULL){
                if(detail->id == id){
                    detail->count++;
                    return head;
                }
                detail = detail->next;
            }
            ptr->details = createDetail(ptr->details,id);
            return head;
        }
        ptr = ptr->next;
    }

    return createNode(head,name,id);
}

void destroy(node_t *head){
    node_t *ptr;
    node *tmp;

    ptr = head;
    while (ptr != NULL){
        tmp = ptr->details;
        while (tmp != NULL){
            node *tmp2 = tmp;
            tmp = tmp->next;
            free(tmp2);
        }
        node_t *ptr2 = ptr;
        ptr = ptr->next;
        free(ptr2);
    }
}
