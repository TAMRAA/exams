#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct list2_t{
    int id;
    int count;
    struct list2_t *next;
}list2_t;

typedef struct list1_t{
    char *name;
    struct list1_t *next;
    struct list2_t *headP;
}list1_t;


// Function Prototypes
list1_t *createMainNode(list1_t *head, char *name, int id);
list2_t *createSecondaryNode(list2_t *head, int id);
list1_t *logic(list1_t *head, char *name, int id);
void displayDataStructure(list1_t *head);
list1_t *insert (char *name);

// Main Function
int main(void){
    list1_t *head = NULL;
    head = insert("../input.txt");
    displayDataStructure(head);

    return EXIT_SUCCESS;
}

// Function Prototypes

list1_t *insert (char *name){
    FILE *fp;
    list1_t *head = NULL;
    char string[30];
    int id;

    fp = fopen(name,"r");
    if(fp == NULL){
        fprintf(stderr,"Error opening file\n");
        exit(EXIT_FAILURE);
    }

    while (fscanf(fp,"%s %d", string, &id) != EOF){
        head = logic(head,string,id);
    }

    fclose(fp);
    return head;
}

void displayDataStructure(list1_t *head){
    list1_t *ptr;
    list2_t *tmp;

    ptr = head;

    while (ptr!=NULL){
        fprintf(stdout,"- %s:\n", ptr->name);
        tmp = ptr->headP;
        while (tmp != NULL){
            fprintf(stdout,"id: %d count: %d\n",tmp->id, tmp->count);
            tmp = tmp->next;
        }
        ptr = ptr->next;
    }
}

list1_t *logic(list1_t *head, char *name, int id){
    list1_t *ptr;

    ptr = head;
    while (ptr != NULL){
        // Match Names
        if(!strcmp(ptr->name, name)){
            list2_t *tmp = ptr->headP;
            while (tmp!= NULL){
                // Match id
                if(tmp->id == id){
                    tmp->count++;
                    return head;
                }
                tmp = tmp->next;
            }
            // No match id
            ptr->headP = createSecondaryNode(ptr->headP, id);
            return head;
        }
        ptr = ptr->next;
    }
    
    // Doesn't Exist
    return createMainNode(head,name,id);
}


list1_t *createMainNode(list1_t *head, char *name, int id){
    list1_t *newNode = (struct list1_t *) malloc (sizeof (list1_t));
    if(newNode == NULL){
        fprintf(stderr,"Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    newNode->name = strdup(name);
    newNode->headP = createSecondaryNode(newNode->headP, id);
    newNode->next = head;
    head = newNode;

    return head;
}


list2_t *createSecondaryNode(list2_t *head, int id){
    list2_t *newNode = (struct list2_t *) malloc (sizeof (list2_t));
    if(newNode == NULL){
        fprintf(stderr,"Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    newNode->id = id;
    newNode->count = 1;
    newNode->next = head;
    head = newNode;

    return head;
}
