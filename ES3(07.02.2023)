#include <stdio.h>
#include <stdlib.h>


// Function Prototypes
void generate(int n);
void generateUtil(int *number, int n, int level);
int isValid(int *number, int index);


// Main Function

int main() {
    int n;
    printf("Enter the number of digits: ");
    scanf("%d", &n);

    generate(n);

    return 0;
}


// Wrapper function to call the recursive function
void generate(int n) {

    int *number = (int *) malloc (n * sizeof(int));
    if (number == NULL) {
        printf("Memory allocation failed.\n");
        return;
    }

    generateUtil(number, n, 0);
    free(number);
}

// Recursive function using backtracking to generate numbers with specified properties
void generateUtil(int *number, int n, int level) {

    // if we reach the end of the tree
    if (level == n) {

        // Check if it's valid ( skip the last one from n )
        if (isValid(number, n - 1)) {
            for (int i = 0; i < n; i++) {
                printf("%d", number[i]);
            }
            printf("\n");
            // Optionally, write to file: FILE *fp = fopen(name, "a"); fprintf(fp, "%s\n", name); fclose(fp);
        }
        return;
    }


    // Create the tree by ( Recursive Through Iteration ) method
    for (int digit = 0; digit <= 9; digit++) {
        // At even positions, the digit must be even (0, 2, 4, 6, 8)
        // At odd positions, the digit must be odd (1, 3, 5, 7, 9)
        if ((level % 2 == 0 && digit % 2 == 0) || (level % 2 == 1 && digit % 2 == 1)) {

            // If we choose odd, we continue odd
            // If we choose even, we continue even
            number[level] = digit;

            // Recur
            generateUtil(number, n, level + 1);
        }
    }
}


// Function to check if a number has the required properties
int isValid(int *number, int index) {
    int sumEven = 0;
    int sumOdd = 0;

    // Traverse the tree we found
    for (int i = 0; i <= index; i++) {

        if (i % 2 == 0) {
            // count the sum of even
            sumEven += number[i];
        } else {
            // count the sum of odd
            sumOdd += number[i];
        }
    }

    // Only return in this case
    return (sumEven == sumOdd);
}



