#include <stdio.h>
#include <stdlib.h>
#define M 6

// Function Prototypes
void check (char **m, int n);
void printMatrix(char **m, int n);

// Main Function

int main() {
    char **mat;

    char s0[M] = {'X', 'X', 'E', 'I', 'O', 'U'};
    char s1[M] = {'X', 'X', 'A', 'E', 'I', 'O'};
    char s2[M] = {'P', 'X', 'X', 'A', 'E', 'I'};
    char s3[M] = {'I', 'X', 'U', 'X', 'A', 'E'};
    char s4[M] = {'P', 'I', 'O', 'U', 'X', 'A'};
    char s5[M] = {'P', 'Y', 'Z', 'X', 'Y', 'X'};

    mat = malloc(M * sizeof(int));
    for(int i = 0; i < M; i++)
        mat[i] = malloc(M * sizeof(int));

    mat[0] = s0;
    mat[1] = s1;
    mat[2] = s2;
    mat[3] = s3;
    mat[4] = s4;
    mat[5] = s5;


    printMatrix(mat, M);
    check(mat, M);

    return 0;
}

// Function Declarations

void check (char **m, int n) {
    // The maximum numbers of repetitions of the same letter in a row or column
    int maxRep = -1;

    // The row with the most repetitions
    int repRow = -1;

    // The column with the most repetitions
    int repCol = -1;    

    // Creates an array counting the occurrences of each letter
    int *occurrence = (int *) malloc (26 * sizeof(int));
    if(occurrence == NULL){
        fprintf(stderr,"Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
        

    // We first count the occurrences of letters among a row
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {

            // We assume all letters are uppercase, and we add 1 to its respective counter
            occurrence[m[i][j]-'A'] += 1;
            
            // If we have more repetition of a letter along a row than the previously held record
            if(maxRep < occurrence[m[i][j]-'A']) {

                // We update the value of the most amount of repetitions
                maxRep = occurrence[m[i][j]-'A'];

                //And store the number of the row that containing said repetitions
                repRow = i;                             
                repCol = -1;
            }
        }

        //If no duplicate letters have been found along a row we reset all counters
        for(int z = 0; z < 26; z++)                     
            occurrence[z] = 0;
    }

    //We now perform the same set of operation along the columns
    for(int j = 0; j < n; j++) {
        for(int i = 0; i < n; i++) {

            occurrence[m[i][j]-'A'] += 1;

            if(maxRep < occurrence[m[i][j]-'A']) {
                maxRep = occurrence[m[i][j]-'A'];
                repCol = j;
                repRow = -1;
            }

        }
        for(int z = 0; z < 26; z++)
            occurrence[z] = 0;
    }

    // repRow is different from -1 only if a row had the most amount of repetitions
    if(repRow != -1) {                              
        for(int c = 0; c < n; c++)
            //And in that case we print row
            printf("%c ", m[repRow][c]);     
        printf("\n");
    }
    // Otherwise, if the biggest amount of repetitions was on a column
    else if (repCol != -1) {                      
        for(int c = 0; c < n; c++)
            // We print column
            printf("%c ", m[c][repCol]);    
        printf("\n");
    }

    free(occurrence);
}

void printMatrix(char **m, int n) {
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            printf("%c ", m[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}
