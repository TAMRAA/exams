#include <stdio.h>
#include <stdlib.h>
#include <string.h>


// Function prototypes
void check (char **m, int n);
char **loadMatrix(char *nameFile, int *nr, int *nc);
void freeMatrix(char **mat, int row);


// Main program
int main() {
    char **mat = NULL;
    int nr, nc;

    mat = loadMatrix("../input.txt", &nr, &nc);

    check(mat,nr);


    freeMatrix(mat,nr);
    return EXIT_SUCCESS;
}


// FUNCTION DECLARATIONS

char **loadMatrix(char *nameFile, int *row, int *col){
    char **mat = NULL;
    FILE *fp;
    int nr, nc;

    fp = fopen(nameFile,"r");
    if(fp == NULL){
        fprintf(stderr,"Error opening file\n");
        exit(EXIT_FAILURE);
    }

    fscanf(fp,"%d %d", &nr, &nc);

    mat = (char **) malloc (nr * sizeof (char *));
    if(mat == NULL){
        fprintf(stderr,"Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    for(int i = 0; i < nr ; i++){
        mat[i] = (char *) malloc(nc * sizeof (char));
        if(mat[i] == NULL){
            fprintf(stderr,"Memory allocation failed\n");
            exit(EXIT_FAILURE);
        }
    }

    for(int i = 0; i < nr ; i++){
        for(int j = 0; j < nc ; j++){
            fscanf(fp," %c", &mat[i][j]);
        }
    }

    *row = nr;
    *col = nc;

    fclose(fp);
    return mat;
}

void freeMatrix(char **mat, int row){
    for(int i = 0; i < row ; i++){
        free(mat[i]);
    }
    free(mat);
}

void check (char **m, int n){

    int maxRep = -1;
    int maxRow = -1;
    int maxCol = -1;

    int *occurrence = (int *) malloc (26 * sizeof (int));
    if(occurrence == NULL){
        fprintf(stderr,"Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    // Search on row
    for(int i = 0; i < n ; i++){
        for(int j = 0; j < n ; j++) {
            occurrence[m[i][j] - 'A'] += 1;

            if (maxRep < occurrence[m[i][j] - 'A']) {
                maxRep = occurrence[m[i][j] - 'A'];
                maxRow = i;
                maxCol = -1;
            }
        }
    }

    for(int z = 0; z < 26 ; z++){
        occurrence[z] = 0;
    }

    // Search on column
    for(int j = 0; j < n ; j++){
        for(int i = 0; i < n ; i++) {
            occurrence[m[i][j] - 'A'] += 1;

            if (maxRep < occurrence[m[i][j] - 'A']) {
                maxRep = occurrence[m[i][j] - 'A'];
                maxRow = -1;
                maxCol = j;
            }
        }
    }

    for(int z = 0; z < 26 ; z++){
        occurrence[z] = 0;
    }


    if(maxRow != -1){
        fprintf(stdout,"Maximum Row: ");
        for(int c = 0; c < n ; c++){
            fprintf(stdout,"%c ", m[maxRow][c]);
        }
        fprintf(stdout,"\n");
    }

    if(maxCol != -1){
        fprintf(stdout,"Maximum Column: ");
        for(int c = 0; c < n ; c++){
            fprintf(stdout,"%c ", m[c][maxCol]);
        }
        fprintf(stdout,"\n");
    }

    free(occurrence);

}
